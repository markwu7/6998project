{"ast":null,"code":"var _jsxFileName = \"/Users/marx/Desktop/partner-finder-app/src/context/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useContext, createContext, useEffect, useState } from 'react';\nimport { GoogleAuthProvider, signInWithPopup, signOut, onAuthStateChanged } from 'firebase/auth';\nimport { auth } from '../firebase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthContextProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [user, setUser] = useState({});\n  const googleSignIn = () => {\n    const provider = new GoogleAuthProvider();\n    signInWithPopup(auth, provider).then(result => {\n      // Validate email domain\n      const emailDomain = result.user.email.split('@')[1];\n      const domainRegex = /columbia\\.edu$/i; // Regular expression for \"columbia.edu\" domain\n      if (!domainRegex.test(emailDomain)) {\n        // If email domain is not \"columbia.edu\", sign out the user and display an error message\n        signOut(auth).then(() => {\n          alert('Only \"columbia.edu\" email addresses are allowed for registration.');\n        });\n      }\n    }).catch(error => {\n      // Handle sign-in error\n      console.error('Google sign-in error:', error);\n    });\n  };\n  const logOut = () => {\n    signOut(auth);\n  };\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, currentUser => {\n      setUser(currentUser);\n      console.log('User', currentUser);\n    });\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      googleSignIn,\n      logOut,\n      user\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthContextProvider, \"l0nCqodPWuiGgcnCHidP90F0Gls=\");\n_c = AuthContextProvider;\nexport const UserAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(UserAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n_c2 = UserAuth;\nvar _c, _c2;\n$RefreshReg$(_c, \"AuthContextProvider\");\n$RefreshReg$(_c2, \"UserAuth\");","map":{"version":3,"names":["useContext","createContext","useEffect","useState","GoogleAuthProvider","signInWithPopup","signOut","onAuthStateChanged","auth","jsxDEV","_jsxDEV","AuthContext","AuthContextProvider","_ref","_s","children","user","setUser","googleSignIn","provider","then","result","emailDomain","email","split","domainRegex","test","alert","catch","error","console","logOut","unsubscribe","currentUser","log","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","UserAuth","_s2","_c2","$RefreshReg$"],"sources":["/Users/marx/Desktop/partner-finder-app/src/context/AuthContext.js"],"sourcesContent":["import { useContext, createContext, useEffect, useState } from 'react';\nimport {\n  GoogleAuthProvider,\n  signInWithPopup,\n  signOut,\n  onAuthStateChanged,\n} from 'firebase/auth';\nimport { auth } from '../firebase';\n\nconst AuthContext = createContext();\n\nexport const AuthContextProvider = ({ children }) => {\n  const [user, setUser] = useState({});\n\n  const googleSignIn = () => {\n    const provider = new GoogleAuthProvider();\n    signInWithPopup(auth, provider)\n    .then((result) => {\n      // Validate email domain\n      const emailDomain = result.user.email.split('@')[1];\n      const domainRegex = /columbia\\.edu$/i; // Regular expression for \"columbia.edu\" domain\n      if (!domainRegex.test(emailDomain)) {\n        // If email domain is not \"columbia.edu\", sign out the user and display an error message\n        signOut(auth).then(() => {\n          alert('Only \"columbia.edu\" email addresses are allowed for registration.');\n        });\n      }\n    })\n    .catch((error) => {\n      // Handle sign-in error\n      console.error('Google sign-in error:', error);\n    });\n  };\n\n  const logOut = () => {\n      signOut(auth)\n  }\n\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, (currentUser) => {\n      setUser(currentUser);\n      console.log('User', currentUser)\n    });\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n\n  return (\n    <AuthContext.Provider value={{ googleSignIn, logOut, user }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const UserAuth = () => {\n  return useContext(AuthContext);\n};\n"],"mappings":";;;AAAA,SAASA,UAAU,EAAEC,aAAa,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACtE,SACEC,kBAAkB,EAClBC,eAAe,EACfC,OAAO,EACPC,kBAAkB,QACb,eAAe;AACtB,SAASC,IAAI,QAAQ,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnC,MAAMC,WAAW,gBAAGV,aAAa,EAAE;AAEnC,OAAO,MAAMW,mBAAmB,GAAGC,IAAA,IAAkB;EAAAC,EAAA;EAAA,IAAjB;IAAEC;EAAS,CAAC,GAAAF,IAAA;EAC9C,MAAM,CAACG,IAAI,EAAEC,OAAO,CAAC,GAAGd,QAAQ,CAAC,CAAC,CAAC,CAAC;EAEpC,MAAMe,YAAY,GAAGA,CAAA,KAAM;IACzB,MAAMC,QAAQ,GAAG,IAAIf,kBAAkB,EAAE;IACzCC,eAAe,CAACG,IAAI,EAAEW,QAAQ,CAAC,CAC9BC,IAAI,CAAEC,MAAM,IAAK;MAChB;MACA,MAAMC,WAAW,GAAGD,MAAM,CAACL,IAAI,CAACO,KAAK,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACnD,MAAMC,WAAW,GAAG,iBAAiB,CAAC,CAAC;MACvC,IAAI,CAACA,WAAW,CAACC,IAAI,CAACJ,WAAW,CAAC,EAAE;QAClC;QACAhB,OAAO,CAACE,IAAI,CAAC,CAACY,IAAI,CAAC,MAAM;UACvBO,KAAK,CAAC,mEAAmE,CAAC;QAC5E,CAAC,CAAC;MACJ;IACF,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAK;MAChB;MACAC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C,CAAC,CAAC;EACJ,CAAC;EAED,MAAME,MAAM,GAAGA,CAAA,KAAM;IACjBzB,OAAO,CAACE,IAAI,CAAC;EACjB,CAAC;EAEDN,SAAS,CAAC,MAAM;IACd,MAAM8B,WAAW,GAAGzB,kBAAkB,CAACC,IAAI,EAAGyB,WAAW,IAAK;MAC5DhB,OAAO,CAACgB,WAAW,CAAC;MACpBH,OAAO,CAACI,GAAG,CAAC,MAAM,EAAED,WAAW,CAAC;IAClC,CAAC,CAAC;IACF,OAAO,MAAM;MACXD,WAAW,EAAE;IACf,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEtB,OAAA,CAACC,WAAW,CAACwB,QAAQ;IAACC,KAAK,EAAE;MAAElB,YAAY;MAAEa,MAAM;MAAEf;IAAK,CAAE;IAAAD,QAAA,EACzDA;EAAQ;IAAAsB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACY;AAE3B,CAAC;AAAC1B,EAAA,CA1CWF,mBAAmB;AAAA6B,EAAA,GAAnB7B,mBAAmB;AA4ChC,OAAO,MAAM8B,QAAQ,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC5B,OAAO3C,UAAU,CAACW,WAAW,CAAC;AAChC,CAAC;AAACgC,GAAA,CAFWD,QAAQ;AAAAE,GAAA,GAARF,QAAQ;AAAA,IAAAD,EAAA,EAAAG,GAAA;AAAAC,YAAA,CAAAJ,EAAA;AAAAI,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}